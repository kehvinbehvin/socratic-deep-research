<%- contentFor('body') %>

<div class="bg-white shadow rounded-lg p-6">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold"><%= queueName %> Metrics</h2>
        <a href="/" class="text-blue-600 hover:text-blue-800">‚Üê Back to Overview</a>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Queue Length Chart -->
        <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="text-lg font-semibold mb-4">Queue Length Over Time</h3>
            <canvas id="queueLengthChart" class="w-full h-64"></canvas>
        </div>

        <!-- Processing Time Chart -->
        <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="text-lg font-semibold mb-4">Processing Time Over Time</h3>
            <canvas id="processingTimeChart" class="w-full h-64"></canvas>
        </div>
    </div>

    <!-- Recent Errors -->
    <div class="mt-6 bg-gray-50 rounded-lg p-4">
        <h3 class="text-lg font-semibold mb-4">Recent Errors</h3>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-6 py-3 bg-gray-100 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                        <th class="px-6 py-3 bg-gray-100 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 bg-gray-100 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <% metrics.errors.slice(-5).forEach(error => { %>
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <%= new Date(error.timestamp).toLocaleString() %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <%= error.tags?.type || 'Unknown' %>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500">
                                <%= error.tags?.message || 'No message' %>
                            </td>
                        </tr>
                    <% }) %>
                    <% if (metrics.errors.length === 0) { %>
                        <tr>
                            <td colspan="3" class="px-6 py-4 text-sm text-gray-500 text-center">
                                No errors recorded
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const queueLengthCtx = document.getElementById('queueLengthChart').getContext('2d');
    const processingTimeCtx = document.getElementById('processingTimeChart').getContext('2d');
    
    // Queue Length Chart
    new Chart(queueLengthCtx, {
        type: 'line',
        data: {
            labels: metrics.messages.map(m => new Date(m.timestamp).toLocaleTimeString()),
            datasets: [{
                label: 'Queue Length',
                data: metrics.messages.map(m => m.value),
                borderColor: 'rgb(59, 130, 246)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Processing Time Chart
    new Chart(processingTimeCtx, {
        type: 'line',
        data: {
            labels: metrics.processing.map(m => new Date(m.timestamp).toLocaleTimeString()),
            datasets: [{
                label: 'Processing Time (ms)',
                data: metrics.processing.map(m => m.value),
                borderColor: 'rgb(16, 185, 129)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});
</script> 