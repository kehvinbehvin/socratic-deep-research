<%- defineContent('body') %>

<div class="max-w-7xl mx-auto px-4">
  <!-- System Health -->
  <div class="bg-white shadow sm:rounded-lg mb-8">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900">
        System Health
      </h3>
      <div class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-3">
        <% for (const [service, status] of Object.entries(health.queueHealth)) { %>
          <div class="bg-gray-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-gray-500 truncate">
              <%= service.replace('-queue', '').split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %> Queue
            </h4>
            <div class="mt-1 flex items-baseline justify-between md:block lg:flex">
              <div class="flex items-center text-<%= status === 'healthy' ? 'green' : 'red' %>-600">
                <span class="text-2xl font-semibold">
                  <%= status === 'healthy' ? '✓' : '✗' %>
                </span>
                <span class="ml-2 text-sm font-medium">
                  <%= status.charAt(0).toUpperCase() + status.slice(1) %>
                </span>
              </div>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Queue Metrics -->
  <div class="bg-white shadow sm:rounded-lg">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900">
        Queue Metrics
      </h3>
      <div class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2">
        <% for (const [queueName, queueMetrics] of Object.entries(metrics)) { %>
          <div class="bg-gray-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-gray-500 truncate">
              <%= queueName.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %>
            </h4>
            <div class="mt-4">
              <canvas id="<%= queueName %>-chart" class="w-full"></canvas>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<%- defineContent('scripts') %>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const metrics = <%- JSON.stringify(metrics) %>;
  
  for (const [queueName, queueMetrics] of Object.entries(metrics)) {
    const ctx = document.getElementById(`${queueName}-chart`).getContext('2d');
    const timestamps = queueMetrics.map(m => new Date(m.timestamp).toLocaleTimeString());
    const values = queueMetrics.map(m => m.value);
    
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: timestamps,
        datasets: [{
          label: queueName.includes('queue_length') ? 'Queue Length' : 'Processing Time (ms)',
          data: values,
          borderColor: 'rgb(79, 70, 229)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  }
</script> 