<%- contentFor('body') %>

<div class="bg-white shadow rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-4">System Health</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <% for (const [queueName, metrics] of Object.entries(health.queues)) { %>
            <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-lg font-semibold mb-2">
                    <a href="/queue/<%= queueName %>" class="text-blue-600 hover:text-blue-800">
                        <%= queueName %>
                    </a>
                </h3>
                <div class="space-y-2">
                    <div class="flex justify-between">
                        <span class="text-gray-600">Queue Length:</span>
                        <span class="font-medium"><%= metrics.length.toFixed(2) %></span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Processing Time:</span>
                        <span class="font-medium"><%= metrics.processingTime.toFixed(2) %>ms</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Success Rate:</span>
                        <span class="font-medium <%= metrics.successRate >= 95 ? 'text-green-600' : 'text-red-600' %>">
                            <%= metrics.successRate.toFixed(2) %>%
                        </span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-gray-600">Errors:</span>
                        <span class="font-medium <%= metrics.errorCount === 0 ? 'text-green-600' : 'text-red-600' %>">
                            <%= metrics.errorCount %>
                        </span>
                    </div>
                </div>
            </div>
        <% } %>
    </div>
</div>

<div class="mt-8 bg-white shadow rounded-lg p-6">
    <h2 class="text-2xl font-bold mb-4">System Metrics</h2>
    <canvas id="metricsChart" class="w-full h-64"></canvas>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('metricsChart').getContext('2d');
    
    // Fetch metrics data
    fetch('/api/metrics')
        .then(response => response.json())
        .then(data => {
            const queueNames = Object.keys(data).filter(key => key.includes('queue_length'));
            const processingTimes = Object.keys(data).filter(key => key.includes('processing_duration_ms'));
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: queueNames.map(name => name.replace('queue_length_', '')),
                    datasets: [{
                        label: 'Queue Length',
                        data: queueNames.map(name => data[name]?.avg || 0),
                        borderColor: 'rgb(59, 130, 246)',
                        tension: 0.1
                    }, {
                        label: 'Processing Time (ms)',
                        data: processingTimes.map(name => data[name]?.avg || 0),
                        borderColor: 'rgb(16, 185, 129)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        });
});
</script> 