<%- defineContent('body') %>

<div class="max-w-4xl mx-auto px-4">
  <!-- Topic Submission Form -->
  <div class="bg-white shadow sm:rounded-lg mb-8">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900">
        Submit a Topic
      </h3>
      <div class="mt-2 max-w-xl text-sm text-gray-500">
        <p>Enter a topic you'd like to learn about using the Socratic method.</p>
      </div>
      <form id="topicForm" class="mt-5">
        <div class="flex">
          <input type="text" name="topic" id="topic" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="Enter your topic">
          <button type="submit" class="ml-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Submit
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Learning Sessions -->
  <div class="bg-white shadow sm:rounded-lg">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
        Learning Sessions
      </h3>
      <div id="sessions" class="space-y-4">
        <!-- Sessions will be populated here -->
      </div>
    </div>
  </div>
</div>

<%- defineContent('scripts') %>
<script>
document.getElementById('topicForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const topicInput = document.getElementById('topic');
  const topic = topicInput.value;
  
  try {
    const response = await fetch('/api/topics', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ topic }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to submit topic');
    }
    
    topicInput.value = '';
  } catch (error) {
    console.error('Error:', error);
    alert('Failed to submit topic. Please try again.');
  }
});

// Function to format the status for display
function formatStatus(status) {
  return status.replace(/_/g, ' ').toLowerCase().replace(/\b\w/g, l => l.toUpperCase());
}

// Function to create a session element
function createSessionElement(session) {
  const div = document.createElement('div');
  div.className = 'bg-gray-50 p-4 rounded-lg';
  div.innerHTML = `
    <div class="flex items-center justify-between">
      <h4 class="text-lg font-medium text-gray-900">${session.topic}</h4>
      <span class="px-2 py-1 text-sm rounded-full ${
        session.status === 'COMPLETED' ? 'bg-green-100 text-green-800' :
        session.status === 'FAILED' ? 'bg-red-100 text-red-800' :
        'bg-blue-100 text-blue-800'
      }">
        ${formatStatus(session.status)}
      </span>
    </div>
    <div class="mt-2">
      <div class="relative pt-1">
        <div class="flex mb-2 items-center justify-between">
          <div>
            <span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-indigo-600 bg-indigo-200">
              Progress
            </span>
          </div>
        </div>
        <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-indigo-200">
          <div
            style="width: ${(session.progress / 9) * 100}%"
            class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500"
          ></div>
        </div>
      </div>
    </div>
  `;
  return div;
}

// Function to update sessions display
async function updateSessions() {
  try {
    const response = await fetch('/api/topics');
    const sessions = await response.json();
    
    const sessionsContainer = document.getElementById('sessions');
    sessionsContainer.innerHTML = '';
    
    sessions.forEach(session => {
      sessionsContainer.appendChild(createSessionElement(session));
    });
  } catch (error) {
    console.error('Error fetching sessions:', error);
  }
}

// Initial load
updateSessions();

// WebSocket connection for real-time updates
const ws = new WebSocket(`ws://${window.location.host}`);

ws.onmessage = (event) => {
  const session = JSON.parse(event.data);
  const sessionsContainer = document.getElementById('sessions');
  const existingSession = Array.from(sessionsContainer.children)
    .find(el => el.querySelector('h4').textContent === session.topic);
  
  if (existingSession) {
    existingSession.replaceWith(createSessionElement(session));
  } else {
    sessionsContainer.insertBefore(createSessionElement(session), sessionsContainer.firstChild);
  }
};

// Reconnect WebSocket if connection is lost
ws.onclose = () => {
  setTimeout(() => {
    window.location.reload();
  }, 1000);
};
</script> 